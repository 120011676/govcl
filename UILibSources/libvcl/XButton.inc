
//----------------------------------------
// The code is automatically generated by the GenlibVcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Apache License 2.0
//
//----------------------------------------

function XButton_Create(AOwner: TComponent): TXButton; stdcall;
begin
  Result :=  TXButton.Create(AOwner);
end;

procedure XButton_Free(AObj: TXButton); stdcall;
begin
  AObj.Free;
end;

procedure XButton_BringToFront(AObj: TXButton); stdcall;
begin
  AObj.BringToFront;
end;

procedure XButton_ClientToScreen(AObj: TXButton; var Point: TPoint; var Result: TPoint); stdcall;
begin
  Result :=  AObj.ClientToScreen(Point);
end;

procedure XButton_ClientToParent(AObj: TXButton; var Point: TPoint; AParent: TWinControl; var Result: TPoint); stdcall;
begin
  Result :=  AObj.ClientToParent(Point, AParent);
end;

function XButton_Dragging(AObj: TXButton): LongBool; stdcall;
begin
  Result :=  AObj.Dragging;
end;

function XButton_HasParent(AObj: TXButton): LongBool; stdcall;
begin
  Result :=  AObj.HasParent;
end;

procedure XButton_Hide(AObj: TXButton); stdcall;
begin
  AObj.Hide;
end;

procedure XButton_Invalidate(AObj: TXButton); stdcall;
begin
  AObj.Invalidate;
end;

function XButton_Perform(AObj: TXButton; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; stdcall;
begin
  Result :=  AObj.Perform(Msg, WParam, LParam);
end;

procedure XButton_Refresh(AObj: TXButton); stdcall;
begin
  AObj.Refresh;
end;

procedure XButton_Repaint(AObj: TXButton); stdcall;
begin
  AObj.Repaint;
end;

procedure XButton_ScreenToClient(AObj: TXButton; var Point: TPoint; var Result: TPoint); stdcall;
begin
  Result :=  AObj.ScreenToClient(Point);
end;

procedure XButton_ParentToClient(AObj: TXButton; var Point: TPoint; AParent: TWinControl; var Result: TPoint); stdcall;
begin
  Result :=  AObj.ParentToClient(Point, AParent);
end;

procedure XButton_SendToBack(AObj: TXButton); stdcall;
begin
  AObj.SendToBack;
end;

procedure XButton_SetBounds(AObj: TXButton; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); stdcall;
begin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
end;

procedure XButton_Show(AObj: TXButton); stdcall;
begin
  AObj.Show;
end;

procedure XButton_Update(AObj: TXButton); stdcall;
begin
  AObj.Update;
end;

function XButton_GetTextBuf(AObj: TXButton; Buffer: PWideChar; BufSize: Integer): Integer; stdcall;
begin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
end;

function XButton_GetTextLen(AObj: TXButton): Integer; stdcall;
begin
  Result :=  AObj.GetTextLen;
end;

procedure XButton_SetTextBuf(AObj: TXButton; Buffer: PWideChar); stdcall;
begin
  AObj.SetTextBuf(Buffer);
end;

function XButton_FindComponent(AObj: TXButton; AName: PChar): TComponent; stdcall;
begin
  Result :=  AObj.FindComponent(AName);
end;

function XButton_GetNamePath(AObj: TXButton): PChar; stdcall;
begin
  Result :=  PChar(AObj.GetNamePath);
end;

procedure XButton_Assign(AObj: TXButton; Source: TPersistent); stdcall;
begin
  AObj.Assign(Source);
end;

procedure XButton_DisposeOf(AObj: TXButton); stdcall;
begin
  AObj.DisposeOf;
end;

function XButton_ClassType(AObj: TXButton): TClass; stdcall;
begin
  Result :=  AObj.ClassType;
end;

function XButton_ClassName(AObj: TXButton): PChar; stdcall;
begin
  Result :=  PChar(AObj.ClassName);
end;

function XButton_InstanceSize(AObj: TXButton): Integer; stdcall;
begin
  Result :=  AObj.InstanceSize;
end;

function XButton_InheritsFrom(AObj: TXButton; AClass: TClass): LongBool; stdcall;
begin
  Result :=  AObj.InheritsFrom(AClass);
end;

function XButton_Equals(AObj: TXButton; Obj: TObject): LongBool; stdcall;
begin
  Result :=  AObj.Equals(Obj);
end;

function XButton_GetHashCode(AObj: TXButton): Integer; stdcall;
begin
  Result :=  AObj.GetHashCode;
end;

function XButton_ToString(AObj: TXButton): PChar; stdcall;
begin
  Result :=  PChar(AObj.ToString);
end;

function XButton_GetCaption(AObj: TXButton): PChar; stdcall;
begin
  Result :=  PChar(AObj.Caption);
end;

procedure XButton_SetCaption(AObj: TXButton; AValue: PChar); stdcall;
begin
  AObj.Caption := AValue;
end;

function XButton_GetShowCaption(AObj: TXButton): LongBool; stdcall;
begin
  Result :=  AObj.ShowCaption;
end;

procedure XButton_SetShowCaption(AObj: TXButton; AValue: LongBool); stdcall;
begin
  AObj.ShowCaption := AValue;
end;

function XButton_GetBackColor(AObj: TXButton): TColor; stdcall;
begin
  Result :=  AObj.BackColor;
end;

procedure XButton_SetBackColor(AObj: TXButton; AValue: TColor); stdcall;
begin
  AObj.BackColor := AValue;
end;

function XButton_GetHoverColor(AObj: TXButton): TColor; stdcall;
begin
  Result :=  AObj.HoverColor;
end;

procedure XButton_SetHoverColor(AObj: TXButton; AValue: TColor); stdcall;
begin
  AObj.HoverColor := AValue;
end;

function XButton_GetDownColor(AObj: TXButton): TColor; stdcall;
begin
  Result :=  AObj.DownColor;
end;

procedure XButton_SetDownColor(AObj: TXButton; AValue: TColor); stdcall;
begin
  AObj.DownColor := AValue;
end;

function XButton_GetBorderWidth(AObj: TXButton): Integer; stdcall;
begin
  Result :=  AObj.BorderWidth;
end;

procedure XButton_SetBorderWidth(AObj: TXButton; AValue: Integer); stdcall;
begin
  AObj.BorderWidth := AValue;
end;

function XButton_GetBorderColor(AObj: TXButton): TColor; stdcall;
begin
  Result :=  AObj.BorderColor;
end;

procedure XButton_SetBorderColor(AObj: TXButton; AValue: TColor); stdcall;
begin
  AObj.BorderColor := AValue;
end;

function XButton_GetPicture(AObj: TXButton): TPicture; stdcall;
begin
  Result :=  AObj.Picture;
end;

procedure XButton_SetPicture(AObj: TXButton; AValue: TPicture); stdcall;
begin
  AObj.Picture := AValue;
end;

function XButton_GetDrawMode(AObj: TXButton): TDrawImageMode; stdcall;
begin
  Result :=  AObj.DrawMode;
end;

procedure XButton_SetDrawMode(AObj: TXButton; AValue: TDrawImageMode); stdcall;
begin
  AObj.DrawMode := AValue;
end;

function XButton_GetNormalFontColor(AObj: TXButton): TColor; stdcall;
begin
  Result :=  AObj.NormalFontColor;
end;

procedure XButton_SetNormalFontColor(AObj: TXButton; AValue: TColor); stdcall;
begin
  AObj.NormalFontColor := AValue;
end;

function XButton_GetDownFontColor(AObj: TXButton): TColor; stdcall;
begin
  Result :=  AObj.DownFontColor;
end;

procedure XButton_SetDownFontColor(AObj: TXButton; AValue: TColor); stdcall;
begin
  AObj.DownFontColor := AValue;
end;

function XButton_GetHoverFontColor(AObj: TXButton): TColor; stdcall;
begin
  Result :=  AObj.HoverFontColor;
end;

procedure XButton_SetHoverFontColor(AObj: TXButton; AValue: TColor); stdcall;
begin
  AObj.HoverFontColor := AValue;
end;

function XButton_GetAction(AObj: TXButton): TBasicAction; stdcall;
begin
  Result :=  AObj.Action;
end;

procedure XButton_SetAction(AObj: TXButton; AValue: TBasicAction); stdcall;
begin
  AObj.Action := AValue;
end;

function XButton_GetAlign(AObj: TXButton): TAlign; stdcall;
begin
  Result :=  AObj.Align;
end;

procedure XButton_SetAlign(AObj: TXButton; AValue: TAlign); stdcall;
begin
  AObj.Align := AValue;
end;

function XButton_GetAnchors(AObj: TXButton): TAnchors; stdcall;
begin
  Result :=  AObj.Anchors;
end;

procedure XButton_SetAnchors(AObj: TXButton; AValue: TAnchors); stdcall;
begin
  AObj.Anchors := AValue;
end;

function XButton_GetBiDiMode(AObj: TXButton): TBiDiMode; stdcall;
begin
  Result :=  AObj.BiDiMode;
end;

procedure XButton_SetBiDiMode(AObj: TXButton; AValue: TBiDiMode); stdcall;
begin
  AObj.BiDiMode := AValue;
end;

function XButton_GetConstraints(AObj: TXButton): TSizeConstraints; stdcall;
begin
  Result :=  AObj.Constraints;
end;

procedure XButton_SetConstraints(AObj: TXButton; AValue: TSizeConstraints); stdcall;
begin
  AObj.Constraints := AValue;
end;

function XButton_GetEnabled(AObj: TXButton): LongBool; stdcall;
begin
  Result :=  AObj.Enabled;
end;

procedure XButton_SetEnabled(AObj: TXButton; AValue: LongBool); stdcall;
begin
  AObj.Enabled := AValue;
end;

function XButton_GetFont(AObj: TXButton): TFont; stdcall;
begin
  Result :=  AObj.Font;
end;

procedure XButton_SetFont(AObj: TXButton; AValue: TFont); stdcall;
begin
  AObj.Font := AValue;
end;

function XButton_GetParentFont(AObj: TXButton): LongBool; stdcall;
begin
  Result :=  AObj.ParentFont;
end;

procedure XButton_SetParentFont(AObj: TXButton; AValue: LongBool); stdcall;
begin
  AObj.ParentFont := AValue;
end;

function XButton_GetParentShowHint(AObj: TXButton): LongBool; stdcall;
begin
  Result :=  AObj.ParentShowHint;
end;

procedure XButton_SetParentShowHint(AObj: TXButton; AValue: LongBool); stdcall;
begin
  AObj.ParentShowHint := AValue;
end;

function XButton_GetPopupMenu(AObj: TXButton): TPopupMenu; stdcall;
begin
  Result :=  AObj.PopupMenu;
end;

procedure XButton_SetPopupMenu(AObj: TXButton; AValue: TPopupMenu); stdcall;
begin
  AObj.PopupMenu := AValue;
end;

function XButton_GetShowHint(AObj: TXButton): LongBool; stdcall;
begin
  Result :=  AObj.ShowHint;
end;

procedure XButton_SetShowHint(AObj: TXButton; AValue: LongBool); stdcall;
begin
  AObj.ShowHint := AValue;
end;

function XButton_GetVisible(AObj: TXButton): LongBool; stdcall;
begin
  Result :=  AObj.Visible;
end;

procedure XButton_SetVisible(AObj: TXButton; AValue: LongBool); stdcall;
begin
  AObj.Visible := AValue;
end;

procedure XButton_SetOnClick(AObj: TXButton; AEventId: NativeUInt); stdcall;
begin
  if AEventId = 0 then
  begin
    AObj.OnClick := nil;
    TEventClass.Remove(AObj, @TEventClass.OnClick);
    Exit;
  end;
  AObj.OnClick := TEventClass.OnClick;
  TEventClass.Add(AObj, @TEventClass.OnClick, AEventId);
end;

procedure XButton_SetOnDblClick(AObj: TXButton; AEventId: NativeUInt); stdcall;
begin
  if AEventId = 0 then
  begin
    AObj.OnDblClick := nil;
    TEventClass.Remove(AObj, @TEventClass.OnDblClick);
    Exit;
  end;
  AObj.OnDblClick := TEventClass.OnDblClick;
  TEventClass.Add(AObj, @TEventClass.OnDblClick, AEventId);
end;

procedure XButton_SetOnMouseDown(AObj: TXButton; AEventId: NativeUInt); stdcall;
begin
  if AEventId = 0 then
  begin
    AObj.OnMouseDown := nil;
    TEventClass.Remove(AObj, @TEventClass.OnMouseDown);
    Exit;
  end;
  AObj.OnMouseDown := TEventClass.OnMouseDown;
  TEventClass.Add(AObj, @TEventClass.OnMouseDown, AEventId);
end;

procedure XButton_SetOnMouseEnter(AObj: TXButton; AEventId: NativeUInt); stdcall;
begin
  if AEventId = 0 then
  begin
    AObj.OnMouseEnter := nil;
    TEventClass.Remove(AObj, @TEventClass.OnMouseEnter);
    Exit;
  end;
  AObj.OnMouseEnter := TEventClass.OnMouseEnter;
  TEventClass.Add(AObj, @TEventClass.OnMouseEnter, AEventId);
end;

procedure XButton_SetOnMouseLeave(AObj: TXButton; AEventId: NativeUInt); stdcall;
begin
  if AEventId = 0 then
  begin
    AObj.OnMouseLeave := nil;
    TEventClass.Remove(AObj, @TEventClass.OnMouseLeave);
    Exit;
  end;
  AObj.OnMouseLeave := TEventClass.OnMouseLeave;
  TEventClass.Add(AObj, @TEventClass.OnMouseLeave, AEventId);
end;

procedure XButton_SetOnMouseMove(AObj: TXButton; AEventId: NativeUInt); stdcall;
begin
  if AEventId = 0 then
  begin
    AObj.OnMouseMove := nil;
    TEventClass.Remove(AObj, @TEventClass.OnMouseMove);
    Exit;
  end;
  AObj.OnMouseMove := TEventClass.OnMouseMove;
  TEventClass.Add(AObj, @TEventClass.OnMouseMove, AEventId);
end;

procedure XButton_SetOnMouseUp(AObj: TXButton; AEventId: NativeUInt); stdcall;
begin
  if AEventId = 0 then
  begin
    AObj.OnMouseUp := nil;
    TEventClass.Remove(AObj, @TEventClass.OnMouseUp);
    Exit;
  end;
  AObj.OnMouseUp := TEventClass.OnMouseUp;
  TEventClass.Add(AObj, @TEventClass.OnMouseUp, AEventId);
end;

procedure XButton_GetBoundsRect(AObj: TXButton; var Result: TRect); stdcall;
begin
  Result :=  AObj.BoundsRect;
end;

procedure XButton_SetBoundsRect(AObj: TXButton; var AValue: TRect); stdcall;
begin
  AObj.BoundsRect := AValue;
end;

function XButton_GetClientHeight(AObj: TXButton): Integer; stdcall;
begin
  Result :=  AObj.ClientHeight;
end;

procedure XButton_SetClientHeight(AObj: TXButton; AValue: Integer); stdcall;
begin
  AObj.ClientHeight := AValue;
end;

procedure XButton_GetClientOrigin(AObj: TXButton; var Result: TPoint); stdcall;
begin
  Result :=  AObj.ClientOrigin;
end;

procedure XButton_GetClientRect(AObj: TXButton; var Result: TRect); stdcall;
begin
  Result :=  AObj.ClientRect;
end;

function XButton_GetClientWidth(AObj: TXButton): Integer; stdcall;
begin
  Result :=  AObj.ClientWidth;
end;

procedure XButton_SetClientWidth(AObj: TXButton; AValue: Integer); stdcall;
begin
  AObj.ClientWidth := AValue;
end;

function XButton_GetControlState(AObj: TXButton): TControlState; stdcall;
begin
  Result :=  AObj.ControlState;
end;

procedure XButton_SetControlState(AObj: TXButton; AValue: TControlState); stdcall;
begin
  AObj.ControlState := AValue;
end;

function XButton_GetControlStyle(AObj: TXButton): TControlStyle; stdcall;
begin
  Result :=  AObj.ControlStyle;
end;

procedure XButton_SetControlStyle(AObj: TXButton; AValue: TControlStyle); stdcall;
begin
  AObj.ControlStyle := AValue;
end;

function XButton_GetExplicitLeft(AObj: TXButton): Integer; stdcall;
begin
  Result :=  AObj.ExplicitLeft;
end;

function XButton_GetExplicitTop(AObj: TXButton): Integer; stdcall;
begin
  Result :=  AObj.ExplicitTop;
end;

function XButton_GetExplicitWidth(AObj: TXButton): Integer; stdcall;
begin
  Result :=  AObj.ExplicitWidth;
end;

function XButton_GetExplicitHeight(AObj: TXButton): Integer; stdcall;
begin
  Result :=  AObj.ExplicitHeight;
end;

function XButton_GetFloating(AObj: TXButton): LongBool; stdcall;
begin
  Result :=  AObj.Floating;
end;

function XButton_GetParent(AObj: TXButton): TWinControl; stdcall;
begin
  Result :=  AObj.Parent;
end;

procedure XButton_SetParent(AObj: TXButton; AValue: TWinControl); stdcall;
begin
  AObj.Parent := AValue;
end;

function XButton_GetStyleElements(AObj: TXButton): TStyleElements; stdcall;
begin
  Result :=  AObj.StyleElements;
end;

procedure XButton_SetStyleElements(AObj: TXButton; AValue: TStyleElements); stdcall;
begin
  AObj.StyleElements := AValue;
end;

procedure XButton_SetOnGesture(AObj: TXButton; AEventId: NativeUInt); stdcall;
begin
  if AEventId = 0 then
  begin
    AObj.OnGesture := nil;
    TEventClass.Remove(AObj, @TEventClass.OnGesture);
    Exit;
  end;
  AObj.OnGesture := TEventClass.OnGesture;
  TEventClass.Add(AObj, @TEventClass.OnGesture, AEventId);
end;

function XButton_GetAlignWithMargins(AObj: TXButton): LongBool; stdcall;
begin
  Result :=  AObj.AlignWithMargins;
end;

procedure XButton_SetAlignWithMargins(AObj: TXButton; AValue: LongBool); stdcall;
begin
  AObj.AlignWithMargins := AValue;
end;

function XButton_GetLeft(AObj: TXButton): Integer; stdcall;
begin
  Result :=  AObj.Left;
end;

procedure XButton_SetLeft(AObj: TXButton; AValue: Integer); stdcall;
begin
  AObj.Left := AValue;
end;

function XButton_GetTop(AObj: TXButton): Integer; stdcall;
begin
  Result :=  AObj.Top;
end;

procedure XButton_SetTop(AObj: TXButton; AValue: Integer); stdcall;
begin
  AObj.Top := AValue;
end;

function XButton_GetWidth(AObj: TXButton): Integer; stdcall;
begin
  Result :=  AObj.Width;
end;

procedure XButton_SetWidth(AObj: TXButton; AValue: Integer); stdcall;
begin
  AObj.Width := AValue;
end;

function XButton_GetHeight(AObj: TXButton): Integer; stdcall;
begin
  Result :=  AObj.Height;
end;

procedure XButton_SetHeight(AObj: TXButton; AValue: Integer); stdcall;
begin
  AObj.Height := AValue;
end;

function XButton_GetCursor(AObj: TXButton): TCursor; stdcall;
begin
  Result :=  AObj.Cursor;
end;

procedure XButton_SetCursor(AObj: TXButton; AValue: TCursor); stdcall;
begin
  AObj.Cursor := AValue;
end;

function XButton_GetHint(AObj: TXButton): PChar; stdcall;
begin
  Result :=  PChar(AObj.Hint);
end;

procedure XButton_SetHint(AObj: TXButton; AValue: PChar); stdcall;
begin
  AObj.Hint := AValue;
end;

function XButton_GetMargins(AObj: TXButton): TMargins; stdcall;
begin
  Result :=  AObj.Margins;
end;

procedure XButton_SetMargins(AObj: TXButton; AValue: TMargins); stdcall;
begin
  AObj.Margins := AValue;
end;

function XButton_GetCustomHint(AObj: TXButton): TCustomHint; stdcall;
begin
  Result :=  AObj.CustomHint;
end;

procedure XButton_SetCustomHint(AObj: TXButton; AValue: TCustomHint); stdcall;
begin
  AObj.CustomHint := AValue;
end;

function XButton_GetComponentCount(AObj: TXButton): Integer; stdcall;
begin
  Result :=  AObj.ComponentCount;
end;

function XButton_GetComponentIndex(AObj: TXButton): Integer; stdcall;
begin
  Result :=  AObj.ComponentIndex;
end;

procedure XButton_SetComponentIndex(AObj: TXButton; AValue: Integer); stdcall;
begin
  AObj.ComponentIndex := AValue;
end;

function XButton_GetOwner(AObj: TXButton): TComponent; stdcall;
begin
  Result :=  AObj.Owner;
end;

function XButton_GetName(AObj: TXButton): PChar; stdcall;
begin
  Result :=  PChar(AObj.Name);
end;

procedure XButton_SetName(AObj: TXButton; AValue: PChar); stdcall;
begin
  AObj.Name := AValue;
end;

function XButton_GetTag(AObj: TXButton): NativeInt; stdcall;
begin
  Result :=  AObj.Tag;
end;

procedure XButton_SetTag(AObj: TXButton; AValue: NativeInt); stdcall;
begin
  AObj.Tag := AValue;
end;

function XButton_GetComponents(AObj: TXButton; AIndex: Integer): TComponent; stdcall;
begin
  Result :=  AObj.Components[AIndex];
end;

function XButton_StaticClassType: TClass; stdcall;
begin
  Result := TXButton;
end;

exports
  XButton_Create,
  XButton_Free,
  XButton_BringToFront,
  XButton_ClientToScreen,
  XButton_ClientToParent,
  XButton_Dragging,
  XButton_HasParent,
  XButton_Hide,
  XButton_Invalidate,
  XButton_Perform,
  XButton_Refresh,
  XButton_Repaint,
  XButton_ScreenToClient,
  XButton_ParentToClient,
  XButton_SendToBack,
  XButton_SetBounds,
  XButton_Show,
  XButton_Update,
  XButton_GetTextBuf,
  XButton_GetTextLen,
  XButton_SetTextBuf,
  XButton_FindComponent,
  XButton_GetNamePath,
  XButton_Assign,
  XButton_DisposeOf,
  XButton_ClassType,
  XButton_ClassName,
  XButton_InstanceSize,
  XButton_InheritsFrom,
  XButton_Equals,
  XButton_GetHashCode,
  XButton_ToString,
  XButton_GetCaption,
  XButton_SetCaption,
  XButton_GetShowCaption,
  XButton_SetShowCaption,
  XButton_GetBackColor,
  XButton_SetBackColor,
  XButton_GetHoverColor,
  XButton_SetHoverColor,
  XButton_GetDownColor,
  XButton_SetDownColor,
  XButton_GetBorderWidth,
  XButton_SetBorderWidth,
  XButton_GetBorderColor,
  XButton_SetBorderColor,
  XButton_GetPicture,
  XButton_SetPicture,
  XButton_GetDrawMode,
  XButton_SetDrawMode,
  XButton_GetNormalFontColor,
  XButton_SetNormalFontColor,
  XButton_GetDownFontColor,
  XButton_SetDownFontColor,
  XButton_GetHoverFontColor,
  XButton_SetHoverFontColor,
  XButton_GetAction,
  XButton_SetAction,
  XButton_GetAlign,
  XButton_SetAlign,
  XButton_GetAnchors,
  XButton_SetAnchors,
  XButton_GetBiDiMode,
  XButton_SetBiDiMode,
  XButton_GetConstraints,
  XButton_SetConstraints,
  XButton_GetEnabled,
  XButton_SetEnabled,
  XButton_GetFont,
  XButton_SetFont,
  XButton_GetParentFont,
  XButton_SetParentFont,
  XButton_GetParentShowHint,
  XButton_SetParentShowHint,
  XButton_GetPopupMenu,
  XButton_SetPopupMenu,
  XButton_GetShowHint,
  XButton_SetShowHint,
  XButton_GetVisible,
  XButton_SetVisible,
  XButton_SetOnClick,
  XButton_SetOnDblClick,
  XButton_SetOnMouseDown,
  XButton_SetOnMouseEnter,
  XButton_SetOnMouseLeave,
  XButton_SetOnMouseMove,
  XButton_SetOnMouseUp,
  XButton_GetBoundsRect,
  XButton_SetBoundsRect,
  XButton_GetClientHeight,
  XButton_SetClientHeight,
  XButton_GetClientOrigin,
  XButton_GetClientRect,
  XButton_GetClientWidth,
  XButton_SetClientWidth,
  XButton_GetControlState,
  XButton_SetControlState,
  XButton_GetControlStyle,
  XButton_SetControlStyle,
  XButton_GetExplicitLeft,
  XButton_GetExplicitTop,
  XButton_GetExplicitWidth,
  XButton_GetExplicitHeight,
  XButton_GetFloating,
  XButton_GetParent,
  XButton_SetParent,
  XButton_GetStyleElements,
  XButton_SetStyleElements,
  XButton_SetOnGesture,
  XButton_GetAlignWithMargins,
  XButton_SetAlignWithMargins,
  XButton_GetLeft,
  XButton_SetLeft,
  XButton_GetTop,
  XButton_SetTop,
  XButton_GetWidth,
  XButton_SetWidth,
  XButton_GetHeight,
  XButton_SetHeight,
  XButton_GetCursor,
  XButton_SetCursor,
  XButton_GetHint,
  XButton_SetHint,
  XButton_GetMargins,
  XButton_SetMargins,
  XButton_GetCustomHint,
  XButton_SetCustomHint,
  XButton_GetComponentCount,
  XButton_GetComponentIndex,
  XButton_SetComponentIndex,
  XButton_GetOwner,
  XButton_GetName,
  XButton_SetName,
  XButton_GetTag,
  XButton_SetTag,
  XButton_GetComponents,
  XButton_StaticClassType;

